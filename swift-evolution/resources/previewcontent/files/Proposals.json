{"creationDate":"2024-09-14T13:38:51Z","commit":"c225716b38173f8114327e2270e5a294c690c604","implementationVersions":["2.2","3.0","3.0.1","3.1","4.0","4.1","4.2","5.0","5.1","5.2","5.3","5.4","5.5","5.5.2","5.6","5.7","5.8","5.9","5.9.2","5.10","6.0","Next"],"schemaVersion":"1.0.0","toolVersion":"0.1.0","proposals":[{"status":{"state":"implemented","version":"6.0"},"summary":"Pattern matching over noncopyable types, particularly noncopyable enums, can be generalized to allow for pattern matches that borrow their subject, in addition to the existing support for consuming pattern matches.","authors":[{"link":"https://github.com/jckarter","name":"Joe Groff"}],"id":"SE-0432","title":"Borrowing and consuming pattern matching for noncopyable types","link":"0432-noncopyable-switch.md","sha":"5eb6171845294adc3f4d366e742b56f64bb0aedf","discussions":[{"link":"https://forums.swift.org/t/se-0432-borrowing-and-consuming-pattern-matching-for-noncopyable-types/71158","name":"review"},{"link":"https://forums.swift.org/t/accepted-with-modifications-se-0432-borrowing-and-consuming-pattern-matching-for-noncopyable-types/71656","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/airspeedswift","name":"Ben Cohen"}]},{"status":{"state":"implemented","version":"6.0"},"summary":"This proposal introduces a mutual exclusion lock, or a mutex, to the standard library. `Mutex` will be a new synchronization primitive in the synchronization module.","authors":[{"link":"https://github.com/Azoy","name":"Alejandro Alonso"}],"id":"SE-0433","title":"Synchronous Mutual Exclusion Lock 🔒","link":"0433-mutex.md","sha":"30662cf0707d21696fbb44678c2a03bf0c54009e","discussions":[{"link":"https://forums.swift.org/t/pitch-synchronous-mutual-exclusion-lock/69889","name":"pitch"},{"link":"https://forums.swift.org/t/se-0433-synchronous-mutual-exclusion-lock/71174","name":"review"},{"link":"https://forums.swift.org/t/accepted-se-0433-synchronous-mutual-exclusion-lock/71463","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/stephentyrone","name":"Stephen Canon"}]},{"status":{"state":"implemented","version":"6.0"},"summary":"This proposal encompasses a collection of changes to concurrency rules concerning global-actor-isolated types to improve their usability.","authors":[{"link":"https://github.com/simanerush","name":"Sima Nerush"},{"link":"https://github.com/mattmassicotte","name":"Matt Massicotte"},{"link":"https://github.com/hborla","name":"Holly Borla"}],"id":"SE-0434","title":"Usability of global-actor-isolated types","upcomingFeatureFlag":{"flag":"GlobalActorIsolatedTypesUsability"},"link":"0434-global-actor-isolated-types-usability.md","sha":"ef550fd7bc98daed315994f6e12dc096ba52c261","discussions":[{"link":"https://forums.swift.org/t/pitch-usability-of-global-actor-isolated-types/70799","name":"pitch"},{"link":"https://forums.swift.org/t/se-0434-usability-of-global-actor-isolated-types/71187","name":"review"},{"link":"https://forums.swift.org/t/accepted-se-0434-usability-of-global-actor-isolated-types/72743","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/rjmccall","name":"John McCall"}]},{"status":{"state":"implemented","version":"6.0"},"summary":"The current Swift Package Manager manifest API for specifying Swift language version(s) applies to an entire package which is limiting when adopting new language versions that have implications for source compatibility.","authors":[{"link":"https://github.com/xedin","name":"Pavel Yaskevich"}],"id":"SE-0435","title":"Swift Language Version Per Target","link":"0435-swiftpm-per-target-swift-language-version-setting.md","sha":"c9c62e089a51c27691cbff673dd20065b2f39e5e","discussions":[{"link":"https://forums.swift.org/t/pitch-swiftpm-swift-language-version-per-target/71067","name":"pitch"},{"link":"https://forums.swift.org/t/se-0435-swift-language-version-per-target/71546","name":"review"},{"link":"https://forums.swift.org/t/accepted-se-0435-swift-language-version-per-target/71846","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/beccadax","name":"Becca Royal-Gordon"}]},{"implementation":[{"account":"apple","id":"73309","repository":"swift","type":"pull"}],"status":{"state":"accepted"},"authors":[{"link":"https://github.com/beccadax","name":"Becca Royal-Gordon"}],"id":"SE-0436","summary":"We propose an alternative to `@objc` classes where Objective-C header `@interface` declarations are implemented by Swift `extension`s marked with `@objc @implementation`. The resulting classes will be implemented in Swift, but will be indistinguishable from Objective-C classes, fully supporting Objective-C subclassing and runtime trickery.","title":"Objective-C implementations in Swift","link":"0436-objc-implementation.md","sha":"aa2e04917951f94f161960a05408513491d9365b","discussions":[{"link":"https://forums.swift.org/t/pitch-objective-c-implementations-in-swift/61907","name":"first pitch"},{"link":"https://forums.swift.org/t/pitch-2-objective-c-implementations-in-swift/68090","name":"second pitch"},{"link":"https://forums.swift.org/t/pitch-3-objective-c-implementations-in-swift/71315","name":"third pitch"},{"link":"https://forums.swift.org/t/se-0436-objective-c-implementations-in-swift/71712","name":"review"},{"link":"https://forums.swift.org/t/accepted-se-0436-objective-c-implementations-in-swift/72053","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/Jumhyn","name":"Freddy Kellison-Linn"}]},{"status":{"state":"implemented","version":"6.0"},"summary":"","authors":[{"link":"https://github.com/lorentey","name":"Karoy Lorentey"}],"id":"SE-0437","title":"Noncopyable Standard Library Primitives","link":"0437-noncopyable-stdlib-primitives.md","sha":"ddef3d2c7c611e86ad16765f8ae9f1e3868d9159","discussions":[{"link":"https://forums.swift.org/t/pitch-noncopyable-standard-library-primitives/71566","name":"pitch"},{"link":"https://forums.swift.org/t/se-0437-generalizing-standard-library-primitives-for-non-copyable-types/72020","name":"review"},{"link":"https://forums.swift.org/t/accepted-se-0437-generalizing-standard-library-primitives-for-non-copyable-types/72275","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/rjmccall","name":"John McCall"}]},{"implementation":[{"account":"apple","id":"73242","repository":"swift","type":"pull"}],"status":{"state":"accepted"},"authors":[{"link":"https://github.com/amritpan","name":"Amritpan Kaur"},{"link":"https://github.com/xedin","name":"Pavel Yaskevich"}],"id":"SE-0438","summary":"Key path expressions access properties dynamically. They are declared with a concrete root type and one or more key path components that define a path to a resulting value via the type’s properties, subscripts, optional-chaining expressions, forced unwrapped expressions, or self. This proposal expands key path expression access to include static properties of a type, i.e., metatype keypaths.","title":"Metatype Keypaths","link":"0438-metatype-keypath.md","sha":"2cf3efbf4b74b3862ece95b027ba67aa8a13d1c6","discussions":[{"link":"https://forums.swift.org/t/pitch-metatype-keypaths/70767","name":"pitch"},{"link":"https://forums.swift.org/t/se-0438-metatype-keypaths/72172","name":"review"},{"link":"https://forums.swift.org/t/accepted-se-0438-metatype-keypaths/72878","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/jckarter","name":"Joe Groff"}]},{"status":{"state":"accepted"},"summary":"This proposal aims to allow the use of trailing commas, currently restricted to array and dictionary literals, in comma-separated lists whenever there are terminators that enable unambiguous parsing.","authors":[{"link":"https://github.com/mateusrodriguesxyz","name":"Mateus Rodrigues"}],"id":"SE-0439","title":"Allow trailing comma in comma-separated lists","link":"0439-trailing-comma-lists.md","sha":"e6b0bed71209e7d979222ac47692e23d6a8e41b6","discussions":[{"link":"https://forums.swift.org/t/pitch-allow-trailing-comma-in-tuples-arguments-and-if-guard-while-conditions/70170","name":"pitch"},{"link":"https://forums.swift.org/t/se-0439-allow-trailing-comma-in-comma-separated-lists/72876","name":"review"},{"link":"https://forums.swift.org/t/accepted-with-modifications-se-0439-allow-trailing-comma-in-comma-separated-lists/73216","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/xwu","name":"Xiaodi Wu"}]},{"implementation":[{"account":"apple","id":"69626","repository":"swift","type":"pull"}],"status":{"state":"implemented","version":"6.0"},"authors":[{"link":"https://github.com/kastiglione","name":"Dave Lee"}],"id":"SE-0440","summary":"This proposal introduces `@DebugDescription`, a new debugging macro to the standard library, which lets data types specify a custom summary to be presented by the debugger. This macro brings improvements to the debugging experience, and simplifies the maintenance and delivery of debugger type summaries. It can be used in place of `CustomDebugStringConvertible` conformance, or in addition to, for custom use cases.","title":"DebugDescription Macro","link":"0440-debug-description-macro.md","sha":"bfda4c3771baa6eab3554e4fab1caf220330a76b","discussions":[{"link":"https://forums.swift.org/t/pitch-debug-description-macro/67711","name":"pitch"},{"link":"https://forums.swift.org/t/se-0440-debugdescription-macro/72958","name":"review"},{"link":"https://forums.swift.org/t/returned-for-revision-se-0440-debugdescription-macro/73270","name":"returned for revision"},{"link":"https://forums.swift.org/t/second-review-se-0440-debugdescription-macro/73325","name":"second review"},{"link":"https://forums.swift.org/t/accepted-se-0440-debugdescription-macro/73741","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/stephentyrone","name":"Steve Canon"}]},{"implementation":[{"account":"swiftlang","id":"7620","repository":"swift-package-manager","type":"pull"},{"account":"swiftlang","id":"75564","repository":"swift","type":"pull"}],"status":{"state":"accepted"},"authors":[{"link":"https://github.com/dempseyatgithub","name":"James Dempsey"}],"id":"SE-0441","summary":"The term \"Swift version” can refer to either the toolchain/compiler version or the language mode. This ambiguity is a consistent source of confusion. This proposal formalizes the term *language mode* in tool options and APIs.","title":"Formalize ‘language mode’ terminology","link":"0441-formalize-language-mode-terminology.md","sha":"dcfbc9d2d69bf8cc5d186bc4200bcf324752b2ce","discussions":[{"link":"https://forums.swift.org/t/pitch-formalize-swift-language-mode-naming-in-tools-and-api/71733","name":"first pitch"},{"link":"https://forums.swift.org/t/pitch-2-formalize-language-mode-naming-in-tools-and-api/72136","name":"second pitch"},{"link":"https://forums.swift.org/t/se-0441-formalize-language-mode-terminology/73182","name":"review"},{"link":"https://forums.swift.org/t/accepted-se-0441-formalize-language-mode-terminology/73716","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/rjmccall","name":"John McCall"}]},{"implementation":[{"account":"apple","id":"74517","repository":"swift","type":"pull"}],"status":{"state":"implemented","version":"Next"},"authors":[{"link":"https://github.com/rlziii","name":"Richard L Zarth III"}],"id":"SE-0442","summary":"`TaskGroup` and `ThrowingTaskGroup` currently require that one of their two generics (`ChildTaskResult`) always be specified upon creation. Due to improvements in closure parameter/result type inference introduced by [SE-0326](https://github.com/swiftlang/swift-evolution/blob/main/proposals/0326-extending-multi-statement-closure-inference.md) this can be simplified by allowing the compiler to infer both of the generics in most cases.","title":"Allow TaskGroup's ChildTaskResult Type To Be Inferred","link":"0442-allow-taskgroup-childtaskresult-type-to-be-inferred.md","sha":"1abe4d92f3ed275847217468e1b68d9f9558560c","discussions":[{"link":"https://forums.swift.org/t/allow-taskgroups-childtaskresult-type-to-be-inferred/72175","name":"pitch"},{"link":"https://forums.swift.org/t/se-0442-allow-taskgroups-childtaskresult-type-to-be-inferred/73397","name":"review"},{"link":"https://forums.swift.org/t/accepted-se-0422-allow-taskgroups-childtaskresult-type-to-be-inferred/73747","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/DougGregor","name":"Doug Gregor"}]},{"implementation":[{"account":"swiftlang","id":"74466","repository":"swift","type":"pull"}],"status":{"state":"accepted"},"authors":[{"link":"https://github.com/douggregor","name":"Doug Gregor"},{"link":"https://github.com/DmT021","name":"Dmitrii Galimzianov"}],"id":"SE-0443","summary":"This proposal introduces new compiler options that allow fine-grained control over how the compiler emits certain warnings: as warnings or as errors.","title":"Precise Control Flags over Compiler Warnings","link":"0443-warning-control-flags.md","sha":"1dcb5012fc2489aa5e29a06fb5d822117e68928b","discussions":[{"link":"https://forums.swift.org/t/warnings-as-errors-exceptions/72925","name":"pitch"},{"link":"https://forums.swift.org/t/se-0443-precise-control-flags-over-compiler-warnings/74116","name":"review"},{"link":"https://forums.swift.org/t/accepted-se-0443-precise-control-flags-over-compiler-warnings/74377","name":"acceptance"}],"reviewManagers":[{"link":"https://github.com/rjmccall","name":"John McCall"}]},{"id":"SE-0444","upcomingFeatureFlag":{"flag":"MemberImportVisibility"},"link":"0444-member-import-visibility.md","authors":[{"link":"https://github.com/tshortli","name":"Allan Shortlidge"}],"discussions":[{"link":"https://forums.swift.org/t/pitch-fixing-member-import-visibility/71432","name":"pitch"},{"link":"https://forums.swift.org/t/se-0444-member-import-visibility/74519","name":"review"}],"title":"Member import visibility","summary":"In Swift, there are rules dictating whether the name of a declaration in another module is considered in scope. For example, if you have a program that uses the `swift-algorithms` package and you want to use the global function [chain()](https://github.com/apple/swift-algorithms/blob/33abb694280321a84aa7dc9806de284afb8ca226/Sources/Algorithms/Chain.swift#L287) then you must write `import Algorithms` in the file that references that function or the compiler will consider it out of scope:","trackingBugs":[{"id":"apple/swift#46493","link":"https://github.com/apple/swift/issues/46493"}],"implementation":[{"account":"apple","id":"72974","repository":"swift","type":"pull"},{"account":"apple","id":"73063","repository":"swift","type":"pull"}],"reviewManagers":[{"link":"https://github.com/beccadax","name":"Becca Royal-Gordon"}],"sha":"4404f604e62a293cedbfadb549949e274250338a","status":{"end":"2024-11-15T00:00:00Z","start":"2024-10-11T00:00:00Z","state":"activeReview"}}]}
